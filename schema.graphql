# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: QueryType
    mutation: MutationType
}

"The application root"
type App {
    "DB column 'description'"
    description: String
    "Many-to-many objects from domain_type.app_id"
    domainTypes: [DomainType]!
    "DB column 'id'"
    id: String!
    "DB column 'name'"
    name: String!
}

"File/image attachments"
type AppAttachment {
    "Description of the attachment, might be former filename"
    description: String
    "attachment id"
    id: String!
    "Attachment media type"
    type: String!
    "Attachment url as alternative to binary content"
    url: String
}

"Data-base backed attachments"
type AppAttachmentData {
    "DB column 'attachment_id'"
    attachmentId: String!
    "attachement as binary data"
    data: [Byte]!
    "attachment data id"
    id: String!
}

"Encapsulates AppScope JSON data"
type AppConfig {
    "Application name"
    name: String!
    "JSON of the current application scope"
    scope: JSONB!
}

"Encapsulates login information for the remember-me feature"
type AppLogin {
    "Last access of the login"
    lastUsed: Timestamp!
    "Token series"
    series: String!
    "Token"
    token: String!
    "User name of the login"
    username: String!
}

"Encapsulates application translations"
type AppTranslation {
    "creation date of the translation entry"
    created: Timestamp!
    "translation id"
    id: String!
    "locale code of the translation'"
    locale: String!
    "last modified date for the translation entry"
    modified: Timestamp!
    "can contain a process name to limit the to just that process"
    processName: String!
    "translation tag/key"
    tag: String!
    "translation text"
    translation: String!
}

"Automaton/Spring Security user object"
type AppUser {
    "Creation date of the user entry"
    created: Timestamp!
    "true if the user account was disabled"
    disabled: Boolean
    "user database id"
    id: String!
    "last login of the user"
    lastLogin: Timestamp
    "User name / login"
    login: String!
    "encrypted password"
    password: String!
    "Spring security roles of the user within the application"
    roles: String!
}

"Encapsulations UserScope JSON data"
type AppUserConfig {
    "DB column 'login'"
    login: String!
    "DB column 'user_id'"
    userId: String!
}

"Stores merge version metadata"
type AppVersion {
    "Timestamp when the version was created"
    created: Timestamp!
    "Id of the entity"
    entityId: String!
    "Entity type the version refers to"
    entityType: String!
    "DB column 'field_mask'"
    fieldMask: BigInteger!
    "Id of the version. Is the same as the version field in the entity."
    id: String!
    "Foreign key to the user who created the version"
    ownerId: String!
    "Previous version for that entity or null"
    prev: String
}

"Generated for java.math.BigInteger"
type BigInteger {
    lowestSetBit: Int
}

"The state of a column within an interactive query."
type ColumnState {
    "True if column is enabled. Server might disabled columns."
    enabled: Boolean
    "Column name"
    name: String
    "True if the column is sortable."
    sortable: Boolean
}

"A domain field belonging to a domain type"
type DomainField {
    "DB column 'description'"
    description: String
    "DB column 'id'"
    id: String!
    "DB column 'important'"
    important: Boolean!
    "Many-to-many objects from domain_field_meta.domain_field_id"
    meta: [DomainFieldMeta]!
    "DB column 'name'"
    name: String
    "DB column 'type'"
    type: String!
}

"Meta data about a domain type field"
type DomainFieldMeta {
    "DB column 'id'"
    id: String!
    "DB column 'name'"
    name: String!
    "DB column 'value'"
    value: String!
}

"A domain type within your application"
type DomainType {
    "DB column 'description'"
    description: String
    "Many-to-many objects from domain_field.domain_type_id"
    domainFields: [DomainField]!
    "DB column 'id'"
    id: String!
    "Many-to-many objects from domain_type_meta.domain_type_id"
    meta: [DomainTypeMeta]!
    "DB column 'name'"
    name: String!
}

"Meta data about a domain type"
type DomainTypeMeta {
    "DB column 'id'"
    id: String!
    "DB column 'name'"
    name: String!
    "DB column 'value'"
    value: String!
}

"Reference to a specific entity or entity version"
type EntityReference {
    id: GenericScalar!
    type: String!
    version: String
}

"Interactive Query with App payload."
type InteractiveQueryApp {
    "Column states for the current result."
    columnStates: [ColumnState]
    "Query configuration the current result was produced with."
    queryConfig: QueryConfig
    "Total row count available."
    rowCount: Int
    "List with current rows of App."
    rows: [App]
    "Name of payload type (always 'App')"
    type: String
}

"Interactive Query with AppUser payload."
type InteractiveQueryAppUser {
    "Column states for the current result."
    columnStates: [ColumnState]
    "Query configuration the current result was produced with."
    queryConfig: QueryConfig
    "Total row count available."
    rowCount: Int
    "List with current rows of AppUser."
    rows: [AppUser]
    "Name of payload type (always 'AppUser')"
    type: String
}

"Container for user-editable interactive query definition. Wraps a query string and a default query config."
type InteractiveQueryDefinition {
    query: String
    queryConfig: QueryConfig
}

"Interactive Query with DomainField payload."
type InteractiveQueryDomainField {
    "Column states for the current result."
    columnStates: [ColumnState]
    "Query configuration the current result was produced with."
    queryConfig: QueryConfig
    "Total row count available."
    rowCount: Int
    "List with current rows of DomainField."
    rows: [DomainField]
    "Name of payload type (always 'DomainField')"
    type: String
}

"Interactive Query with DomainType payload."
type InteractiveQueryDomainType {
    "Column states for the current result."
    columnStates: [ColumnState]
    "Query configuration the current result was produced with."
    queryConfig: QueryConfig
    "Total row count available."
    rowCount: Int
    "List with current rows of DomainType."
    rows: [DomainType]
    "Name of payload type (always 'DomainType')"
    type: String
}

"A merge conflict for one entity."
type MergeConflict {
    "Returns true if all conflict fields are decided or if there are no conflict fields."
    decided: Boolean
    "True if the entity has been deleted on the other side"
    deleted: Boolean!
    """

    Conflicted fields. Will be both conflicts on scalar fields as well as conflicts on object fields representing
    foreign key and many-to-many conflicts and the informational/user-facing data to resolve those.
    """
    fields: [MergeConflictField]!
    "Id of the entity as generic scalar"
    id: GenericScalar!
    "The version of the currently stored entity."
    theirVersion: String
    "Type of the entity."
    type: String!
}

"A field within a merge conflict."
type MergeConflictField {
    """

    True if the conflict is only sent for informational purposes and for the "apply" function. It marks conflicts
    that are already resolved.
    """
    informational: Boolean
    name: String!
    "The user's value for the conflict."
    ours: GenericScalar
    """

    In case of a pseudo conflict on a many-to-many field this contains entity references to the current set of link
    type entities.
    """
    references: [EntityReference]
    "Field status for the conflict."
    status: MergeFieldStatus
    "The currently stored value for the conflict."
    theirs: GenericScalar
}

"Encapsulates the result of a merge operation. Used in-memory on the client-side."
type MergeResolution {
    "Operation selected by the user."
    operation: MergeResolutionOperation
    "Resolutions to apply to the working set."
    resolutions: [MergeResolutionEntity]!
}

"Encapsulates the merge resolution for one of the entities involved. Used in-memory on the client-side."
type MergeResolutionEntity {
    deleted: Boolean!
    fields: [MergeResolutionField]!
    id: GenericScalar!
    type: String!
    version: String
}

"Encapsulates the merge resolution of a single field. Used in-memory on the client-side."
type MergeResolutionField {
    fieldType: MergeResolutionFieldType
    "GraphQL name of the field."
    name: String!
    status: MergeFieldStatus!
    "Wrapped value"
    value: GenericScalar
}

"Encapsulates the result of a merge process, i.e. a list of domain object conflicts."
type MergeResult {
    conflicts: [MergeConflict]!
    "Returns true when the merge is done because there were no conflicts."
    done: Boolean
}

"Auto-generated from AutomatontemplateLogic, AutomatonStandardLogic"
type MutationType {
    "Deletes the domain object of the given type and with the given id."
    deleteDomainObject(cascade: [String], id: GenericScalar!, type: String!): Boolean
    "Generate a new domain object id using the application specific IdGenerator implementation."
    generateDomainObjectId(count: Int = 1, domainType: String!): [GenericScalar]
    "Server-side end-point for WorkingSet.merge()"
    mergeWorkingSet(changes: [EntityChangeInput]!, deletions: [EntityDeletionInput]!, mergeConfig: MergeConfigInput): MergeResult
    "Server-side end-point for WorkingSet.persist()"
    persistWorkingSet(deletions: [EntityDeletionInput]!, domainObjects: [DomainObject]!): Boolean
    "Dummy end-point to define the types involved in resolving a merge conflict, which happens on the client side only. This is only exists for documentation purposes."
    resolveMerge(mergeConfig: MergeConfigInput, mergeConflict: MergeConflictInput): MergeResolution
    "Stores a single domain object of any type. Note that you might have to manually register an input type."
    storeDomainObject(domainObject: DomainObject!): GenericScalar
    "Stores a list of domain object of any type. Note that you might have to manually register an input type."
    storeDomainObjects(domainObjects: [DomainObject]!): [GenericScalar]
    "Updates the associations of one source domain object over a many-to-many connection / an associative entity"
    updateAssociations(domainObjects: [DomainObject]!, domainType: String!, leftSideRelation: String!, sourceIds: [GenericScalar]!): [GenericScalar]
}

"Encapsulates all parameters of an interactive query."
type QueryConfig {
    "FilterDSL condition graph or null"
    condition: Condition
    "Optional unique query identifier. Useful for server-side query implementations."
    id: String
    "Current offset within the paginated results. The number of rows to skip in the results."
    offset: Int
    "Maximum number of paginated results.,"
    pageSize: Int
    "Current sort order for the query."
    sortFields: [FieldExpression]
}

"Auto-generated from AutomatontemplateLogic, AutomatonStandardLogic"
type QueryType {
    _interactiveQueryDefinition(def: InteractiveQueryDefinitionInput): InteractiveQueryDefinition
    getDomainTypeIndex(condition: Condition, domainType: String!, field: String!): [String]
    iQueryApp(config: QueryConfigInput!): InteractiveQueryApp
    iQueryAppUser(config: QueryConfigInput!): InteractiveQueryAppUser
    iQueryDomainField(config: QueryConfigInput!): InteractiveQueryDomainField
    iQueryDomainType(config: QueryConfigInput!): InteractiveQueryDomainType
    """

    Resolves filter context values without executing them in a filter. Only use this if you need the actual values of
    filter contexts on the client side. The normal usage of context values is to embed <code>context()</code> nodes
    in filters.
    """
    resolveFilterContext(names: [String]!): [GenericScalar]
}

enum MergeFieldStatus {
    "We took the original value."
    OURS
    "We took over the current database value"
    THEIRS
    "User has not yet decided."
    UNDECIDED
    "The user specified an alternate third value."
    VALUE
}

enum MergeResolutionFieldType {
    "Normal input field"
    FIELD
    "Foreign key raw key id field"
    FK_KEY
    "Embedded object for a foreign key"
    FK_OBJECT
    "Ignored field"
    IGNORE
    "Embedded list of objects for a m-to-n relation"
    MANY_TO_MANY
}

"User selected operation for a merge"
enum MergeResolutionOperation {
    """

    The merge resolutions are to be applied without executing the final store operation. The user can inspect the merge
    result in the original form context.
    """
    APPLY
    "The store operation was canceled. The working set remains as-is."
    CANCEL
    "The whole process is aborted and the current working set data is to be discarded."
    DISCARD
    "Merge resolutions are applied to the working set and the final store operation is performed."
    STORE
}

"The application root"
input AppInput {
    description: String
    id: String!
    name: String!
}

"A domain field belonging to a domain type"
input DomainFieldInput {
    description: String
    domainTypeId: String!
    id: String!
    important: Boolean!
    name: String
    type: String!
}

"A domain type within your application"
input DomainTypeInput {
    appId: String!
    description: String
    id: String!
    name: String!
}

"Encapsulates multiple changes for a single entity / domain object."
input EntityChangeInput {
    "List of changes"
    changes: [EntityFieldChangeInput]!
    "Id value of the entity/domain object"
    id: GenericScalar!
    new: Boolean
    "Domain type of the object"
    type: String!
    "Version of the entity/domain object"
    version: String
}

"Encapsulates the type and id of on object deletion in a working set."
input EntityDeletionInput {
    "Id of deleted object as generic scalar."
    id: GenericScalar!
    "Domain type of deleted object"
    type: String!
    version: String
}

"A change for one domain object field"
input EntityFieldChangeInput {
    "Field the change applies to"
    field: String!
    "Generic scalar value of the field. Must match the underlying GraphQL field type."
    value: GenericScalar
}

"Reference to a specific entity or entity version"
input EntityReferenceInput {
    id: GenericScalar!
    type: String!
    version: String
}

"Container for user-editable interactive query definition. Wraps a query string and a default query config."
input InteractiveQueryDefinitionInput {
    query: String
    queryConfig: QueryConfigInput
}

"Generated for de.quinscape.automaton.model.merge.MergeConfig"
input MergeConfigInput {
    allowApply: Boolean
    allowDiscard: Boolean
    typeConfigs: [MergeTypeConfigInput]!
}

"A field within a merge conflict."
input MergeConflictFieldInput {
    """

    True if the conflict is only sent for informational purposes and for the "apply" function. It marks conflicts
    that are already resolved.
    """
    informational: Boolean
    name: String!
    "The user's value for the conflict."
    ours: GenericScalar
    """

    In case of a pseudo conflict on a many-to-many field this contains entity references to the current set of link
    type entities.
    """
    references: [EntityReferenceInput]
    "Field status for the conflict."
    status: MergeFieldStatus
    "The currently stored value for the conflict."
    theirs: GenericScalar
}

"A merge conflict for one entity."
input MergeConflictInput {
    "Returns true if all conflict fields are decided or if there are no conflict fields."
    decided: Boolean
    "True if the entity has been deleted on the other side"
    deleted: Boolean!
    """

    Conflicted fields. Will be both conflicts on scalar fields as well as conflicts on object fields representing
    foreign key and many-to-many conflicts and the informational/user-facing data to resolve those.
    """
    fields: [MergeConflictFieldInput]!
    "Id of the entity as generic scalar"
    id: GenericScalar!
    "The version of the currently stored entity."
    theirVersion: String
    "Type of the entity."
    type: String!
}

"Generated for de.quinscape.automaton.model.merge.MergeGroup"
input MergeGroupInput {
    fields: [String]!
}

input MergeTypeConfigInput {
    """

    List of fields that are ignored in the merge, i.e. the last value always wins. This is useful for
    meta-data fields like creation time or change author
    """
    ignored: [String]
    """

    List of field groups are that only merged together. A change in one field of a merge-group always creates a
    conflict
    for the whole group.
    """
    mergeGroups: [MergeGroupInput]
    name: String!
}

"Encapsulates all parameters of an interactive query."
input QueryConfigInput {
    "FilterDSL condition graph or null"
    condition: Condition
    "Optional unique query identifier. Useful for server-side query implementations."
    id: String
    "Current offset within the paginated results. The number of rows to skip in the results."
    offset: Int
    "Maximum number of paginated results.,"
    pageSize: Int
    "Current sort order for the query."
    sortFields: [FieldExpression]
}


"Built-in Byte as Int"
scalar Byte

"Map graph representing JOOQ conditions"
scalar Condition

"Container for generic domain objects as scalar"
scalar DomainObject

"Map graph representing a JOOQ field expression"
scalar FieldExpression

"Container for generic scalar values"
scalar GenericScalar

"Postgresql jsonb type equivalent"
scalar JSONB

"SQL timestamp equivalent"
scalar Timestamp
