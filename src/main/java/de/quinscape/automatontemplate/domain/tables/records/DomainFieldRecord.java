/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontemplate.domain.tables.records;


import de.quinscape.automatontemplate.domain.tables.DomainField;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "domain_field", schema = "public", indexes = {
    @Index(name = "pk_domain_field", unique = true, columnList = "id ASC")
})
public class DomainFieldRecord extends UpdatableRecordImpl<DomainFieldRecord> implements Record6<String, String, String, String, String, Boolean> {

    private static final long serialVersionUID = 1185415776;

    /**
     * Setter for <code>public.domain_field.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.domain_field.id</code>.
     */
    @Id
    @Column(name = "id", unique = true, nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.domain_field.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.domain_field.name</code>.
     */
    @Column(name = "name", length = 100)
    @Size(max = 100)
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.domain_field.type</code>.
     */
    public void setType(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.domain_field.type</code>.
     */
    @Column(name = "type", nullable = false, length = 100)
    @NotNull
    @Size(max = 100)
    public String getType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.domain_field.description</code>.
     */
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.domain_field.description</code>.
     */
    @Column(name = "description")
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.domain_field.domain_type_id</code>.
     */
    public void setDomainTypeId(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.domain_field.domain_type_id</code>.
     */
    @Column(name = "domain_type_id", nullable = false, length = 36)
    @NotNull
    @Size(max = 36)
    public String getDomainTypeId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.domain_field.important</code>.
     */
    public void setImportant(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.domain_field.important</code>.
     */
    @Column(name = "important", nullable = false)
    @NotNull
    public Boolean getImportant() {
        return (Boolean) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, String, String, String, String, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, String, String, String, String, Boolean> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return DomainField.DOMAIN_FIELD.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return DomainField.DOMAIN_FIELD.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return DomainField.DOMAIN_FIELD.TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return DomainField.DOMAIN_FIELD.DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return DomainField.DOMAIN_FIELD.DOMAIN_TYPE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field6() {
        return DomainField.DOMAIN_FIELD.IMPORTANT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getDomainTypeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component6() {
        return getImportant();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getDomainTypeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value6() {
        return getImportant();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DomainFieldRecord value1(String value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DomainFieldRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DomainFieldRecord value3(String value) {
        setType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DomainFieldRecord value4(String value) {
        setDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DomainFieldRecord value5(String value) {
        setDomainTypeId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DomainFieldRecord value6(Boolean value) {
        setImportant(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DomainFieldRecord values(String value1, String value2, String value3, String value4, String value5, Boolean value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DomainFieldRecord
     */
    public DomainFieldRecord() {
        super(DomainField.DOMAIN_FIELD);
    }

    /**
     * Create a detached, initialised DomainFieldRecord
     */
    public DomainFieldRecord(String id, String name, String type, String description, String domainTypeId, Boolean important) {
        super(DomainField.DOMAIN_FIELD);

        set(0, id);
        set(1, name);
        set(2, type);
        set(3, description);
        set(4, domainTypeId);
        set(5, important);
    }
}
