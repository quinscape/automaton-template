/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontemplate.domain.tables;


import de.quinscape.automatontemplate.domain.Indexes;
import de.quinscape.automatontemplate.domain.Keys;
import de.quinscape.automatontemplate.domain.Public;
import de.quinscape.automatontemplate.domain.tables.records.DomainFieldRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DomainField extends TableImpl<DomainFieldRecord> {

    private static final long serialVersionUID = 2055976964;

    /**
     * The reference instance of <code>public.domain_field</code>
     */
    public static final DomainField DOMAIN_FIELD = new DomainField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DomainFieldRecord> getRecordType() {
        return DomainFieldRecord.class;
    }

    /**
     * The column <code>public.domain_field.id</code>.
     */
    public final TableField<DomainFieldRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.domain_field.name</code>.
     */
    public final TableField<DomainFieldRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.domain_field.type</code>.
     */
    public final TableField<DomainFieldRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.domain_field.description</code>.
     */
    public final TableField<DomainFieldRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.domain_field.domain_type_id</code>.
     */
    public final TableField<DomainFieldRecord, String> DOMAIN_TYPE_ID = createField("domain_type_id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.domain_field.important</code>.
     */
    public final TableField<DomainFieldRecord, Boolean> IMPORTANT = createField("important", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.domain_field</code> table reference
     */
    public DomainField() {
        this(DSL.name("domain_field"), null);
    }

    /**
     * Create an aliased <code>public.domain_field</code> table reference
     */
    public DomainField(String alias) {
        this(DSL.name(alias), DOMAIN_FIELD);
    }

    /**
     * Create an aliased <code>public.domain_field</code> table reference
     */
    public DomainField(Name alias) {
        this(alias, DOMAIN_FIELD);
    }

    private DomainField(Name alias, Table<DomainFieldRecord> aliased) {
        this(alias, aliased, null);
    }

    private DomainField(Name alias, Table<DomainFieldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_DOMAIN_FIELD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DomainFieldRecord> getPrimaryKey() {
        return Keys.PK_DOMAIN_FIELD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DomainFieldRecord>> getKeys() {
        return Arrays.<UniqueKey<DomainFieldRecord>>asList(Keys.PK_DOMAIN_FIELD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DomainFieldRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DomainFieldRecord, ?>>asList(Keys.DOMAIN_FIELD__FK_DOMAIN_FIELD_TYPE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DomainField as(String alias) {
        return new DomainField(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DomainField as(Name alias) {
        return new DomainField(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DomainField rename(String name) {
        return new DomainField(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DomainField rename(Name name) {
        return new DomainField(name, null);
    }
}
