/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automatontemplate.domain.tables;


import de.quinscape.automatontemplate.domain.Indexes;
import de.quinscape.automatontemplate.domain.Keys;
import de.quinscape.automatontemplate.domain.Public;
import de.quinscape.automatontemplate.domain.tables.records.DomainTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DomainType extends TableImpl<DomainTypeRecord> {

    private static final long serialVersionUID = -622563566;

    /**
     * The reference instance of <code>public.domain_type</code>
     */
    public static final DomainType DOMAIN_TYPE = new DomainType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DomainTypeRecord> getRecordType() {
        return DomainTypeRecord.class;
    }

    /**
     * The column <code>public.domain_type.id</code>.
     */
    public final TableField<DomainTypeRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.domain_type.name</code>.
     */
    public final TableField<DomainTypeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.domain_type.description</code>.
     */
    public final TableField<DomainTypeRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.domain_type.app_id</code>.
     */
    public final TableField<DomainTypeRecord, String> APP_ID = createField("app_id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * Create a <code>public.domain_type</code> table reference
     */
    public DomainType() {
        this(DSL.name("domain_type"), null);
    }

    /**
     * Create an aliased <code>public.domain_type</code> table reference
     */
    public DomainType(String alias) {
        this(DSL.name(alias), DOMAIN_TYPE);
    }

    /**
     * Create an aliased <code>public.domain_type</code> table reference
     */
    public DomainType(Name alias) {
        this(alias, DOMAIN_TYPE);
    }

    private DomainType(Name alias, Table<DomainTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private DomainType(Name alias, Table<DomainTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_DOMAIN_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DomainTypeRecord> getPrimaryKey() {
        return Keys.PK_DOMAIN_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DomainTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<DomainTypeRecord>>asList(Keys.PK_DOMAIN_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DomainTypeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DomainTypeRecord, ?>>asList(Keys.DOMAIN_TYPE__FK_DOMAIN_TYPE_APP_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DomainType as(String alias) {
        return new DomainType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DomainType as(Name alias) {
        return new DomainType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DomainType rename(String name) {
        return new DomainType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DomainType rename(Name name) {
        return new DomainType(name, null);
    }
}
